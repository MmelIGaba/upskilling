#include <iostream>
#include <vector>

using namespace std;

double rowSum(const vector<vector<double>>& arr, int n) {
    double rowCount = 0;
    for (int i = 0; i < n; i++) {
        double temp = 0;
        for (int j = 0; j < n; j++) {
            temp += arr[i][j];
        }
        if (i != 0 && temp != rowCount) {
            return 1;
        }
        rowCount = temp;
    }
    cout << "out \n";
    return rowCount;
}

double colSum(const vector<vector<double>>& arr, int n) {
    double colCount = 0;

    for (int j = 0; j < n; j++) {
        double temp = 0;
        for (int i = 0; i < n; i++) {
            temp += arr[j][0];
        }
        if (j != 0 && temp != colCount) {
            return 1;
        }
        colCount = temp;
    }
    return colCount;
}
double diagSum(const vector<vector<double>>& arr, int n) {
    double diagCount = 0;
    for (int i = 0; i < n; i++) {
        diagCount += arr[i][i]; // Summing up the main diagonal elements
    }
    double negDiag = 0;
    for (int i = 0; i < n; i++) {
        negDiag += arr[i][n - 1 - i]; // Summing up the decreasing diagonal elements
    }
    return negDiag == diagCount ? negDiag: -1;
}

int main() {
    // Example: Creating a 3x3 2D vector
    vector<vector<double>> arr = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };

    // Call the functions
    cout << rowSum(arr, 3) << "\n";
    cout << colSum(arr, 3) << "\n";
    cout << diagSum(arr, 3)<< "\n";
    return 0;
}
